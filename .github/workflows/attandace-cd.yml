name: Android CD

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed

jobs:
  if_merged:

    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: PR merged
        run: echo "PR merged"

  checkout:
    needs: if_merged
    runs-on: ubuntu-latest
    env:
      KAKAO_NATIVE_API_KEY: ${{ secrets.KAKAO_NATIVE_API_KEY }}
      PLAY_STORE_API_KEY: ${{ secrets.GOOGLE_CLOUD_JSON }}
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Access KAKAO_NATIVE_API_KEY
        run: |
          # 카카오 키값 local.properties에 파일 만듦
          echo KAKAO_NATIVE_API_KEY=\"$KAKAO_NATIVE_API_KEY\" >> ./local.properties
          
          # 구글 스토어 json 키값 파일 만듦
          echo PLAY_STORE_API_KEY=\"$PLAY_STORE_API_KEY\" >> ./.github/api-play-store-key.json

        working-directory: ${{ env.working-directory }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

  check_pr_labels:
    needs: checkout
    uses: ./.github/workflows/check_pr_label.yml

  commit-message:
    needs: check_pr_labels
    runs-on: ubuntu-latest
    outputs:
      message: ${{steps.get_pull_request_last_comment.output.COMMENT}}
    steps:
      - id: get_pull_request_last_comment
        name: GET PR Last Comment
        run: |
          # PR 마지막 코멘트를 가져와서 디스트리뷰션 title 로 사용
          pull_request_comment=$(curl \
          --fail \
          -H "Accept: application/vnd.github.groot-preview+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.event.pull_request._links.comments.href }}" \
          | jq -r ".[-1] | .body")
          # comments 출력
          echo "::set-output name=COMMENT::$pull_request_comment"

  build_debug:
    if: ${{ needs.check_pr_labels.outputs.debug }}
    needs: commit-message
    runs-on: ubuntu-latest
    steps:
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.0"

      - name: Cache Ruby - Bundler
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches/
          key: cache-clean-gradle-${{ matrix.os }}-${{ matrix.jdk }}

      - name: Cache Gradle Wrapper
        uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper/
          key: cache-clean-wrapper-${{ matrix.os }}-${{ matrix.jdk }}

      - name: Install bundle
        run: |
          cd ${{ env.working-directory }}/fastlane
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Make env file
        run: |
          # fastlane fastfile
          echo "$FIREBASE_CREDENTIALS" > firebase_credentials.json.b64
          base64 -d -i firebase_credentials.json.b64 > firebase_credentials.json
        env:
          FASTLANE_FASTFILE: ${{ secrets.FASTLANE_FASTFILE }}

      - name: Fastlane debug
        run: bundle exec fastlane distribute_debug "message:${{ needs.commit_message.outputs.message }}"
        env:
          FIREBASE_APP_ID_DEBUG: ${{ secrets.FIREBASE_APP_ID }}
